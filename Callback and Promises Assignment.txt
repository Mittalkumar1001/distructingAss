1. Double using callback.
Write a function that takes in an array of integers and a callback function, and returns a new array where each
element is doubled using the callback.
Ans-
function doubleWithCallback(arr, callback) {
    // Use the map function to apply the callback to each element in the array
    const doubledArray = arr.map(callback);

    return doubledArray;
}

// Example usage:
const inputArray = [1, 2, 3, 4, 5];

// Define a callback function to double a number
const doubleCallback = function (num) {
    return num * 2;
};

// Apply the function to double each element in the array
const result = doubleWithCallback(inputArray, doubleCallback);

// Print the result
console.log(result); // Output: [2, 4, 6, 8, 10]
2. String Manipulation.
Write a function “manipulateString” that takes in a string and converts the characters to uppercase letters. The
function should return a callback function “logString” that logs the sentence “The manipulated string is: “ along
with the manipulated string or the new string to the console.
Ans-
function manipulateString(inputString) {
    // Convert characters to uppercase
    const manipulatedString = inputString.toUpperCase();

    // Define the callback function
    function logString() {
        // Log the manipulated string along with a descriptive sentence
        console.log(`The manipulated string is: ${manipulatedString}`);
    }

    // Return the callback function
    return logString;
}

// Example usage:
const originalString = "Hello, World!";
const logFunction = manipulateString(originalString);

// Call the callback function to log the manipulated string
logFunction();
3. Age in Days.
Write a JavaScript function called ageInDays that accepts an object containing a person's first name, last
name, and age in years as input. The function should concatenate the first and last name into a single string
and store it in a variable called fullName. It should then calculate the person's age in days and store it in a
variable called ageInDays.
The ageInDays function should then return a callback function that logs a message to the console. The
message should include the person's full name and age in days, and should be in the format: "The person's full
name is [full name] and their age in days is [age in days]."
Note that the ageInDays function should not log the message to the console directly, but should instead return
a callback function that can be used to log the message at a later time.
Ans-
function ageInDays(person) {
    // Concatenate first and last name
    const fullName = `${person.firstName} ${person.lastName}`;

    // Calculate age in days
    const ageInDays = person.age * 365; // Assuming an average of 365 days in a year

    // Define the callback function
    function logAgeInDays() {
        // Log the message with full name and age in days
        console.log(`The person's full name is ${fullName} and their age in days is ${ageInDays}.`);
    }

    // Return the callback function
    return logAgeInDays;
}

// Example usage:
const personInfo = {
    firstName: "John",
    lastName: "Doe",
    age: 30,
};

// Get the callback function
const logFunction = ageInDays(personInfo);

// Call the callback function to log the message
logFunction();
4. Arrange in alphabetical order.
Write a program that accepts a list of objects representing books [ title, author, and year] and a callback
function. The program should use the map function to create a new list containing only the titles of the books,
and then pass this new list to the callback function. The callback function should then log the titles to the
console in alphabetical order.
Ans-function arrangeTitlesInAlphabeticalOrder(books, callback) {
    // Use map to create a new list containing only the titles of the books
    const titlesList = books.map(book => book.title);

    // Sort the titles in alphabetical order
    const sortedTitles = titlesList.sort();

    // Pass the sorted titles to the callback function
    callback(sortedTitles);
}

// Example usage:
const booksList = [
    { title: "The Great Gatsby", author: "F. Scott Fitzgerald", year: 1925 },
    { title: "To Kill a Mockingbird", author: "Harper Lee", year: 1960 },
    { title: "1984", author: "George Orwell", year: 1949 },
];

// Callback function to log titles in alphabetical order
function logTitles(titles) {
    console.log("Titles in alphabetical order:");
    titles.forEach(title => {
        console.log(title);
    });
}

// Call the program with the list of books and the callback function
arrangeTitlesInAlphabeticalOrder(booksList, logTitles);
5. Greeting Promise.
You need to write a function that takes a name as input and returns a promise that resolves with a greeting
message. The function should greet the person using their name, with a message in the format "Hello, {name}!".
For example, if the input to the function is "Mithun", the promise should resolve with the string "Hello, Mithun!".
Ans-function greetWithPromise(name) {
    return new Promise((resolve, reject) => {
        // Check if the name is provided
        if (name) {
            // Resolve the promise with the greeting message
            resolve(`Hello, ${name}!`);
        } else {
            // Reject the promise with an error message
            reject("Name not provided");
        }
    });
}

// Example usage:
const name = "Mithun";

// Call the function and handle the promise
greetWithPromise(name)
    .then(greeting => {
        console.log(greeting); // Output: Hello, Mithun!
    })
    .catch(error => {
        console.error(error); // Output: Name not provided
    });
6. 6. Fetch results asynchronously.
Write a function that asynchronously fetches data from an API
[ https://jsonplaceholder.typicode.com/todos/1 ]and logs the result to the console.
Ans-async function fetchDataAsync() {
    try {
        // Use the fetch function to make an asynchronous request
        const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');

        // Check if the request was successful (status code 200)
        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        // Parse the response JSON
        const data = await response.json();

        // Log the result to the console
        console.log('Fetched Data:', data);
    } catch (error) {
        // Log any errors that occurred during the fetch
        console.error('Error fetching data:', error.message);
    }
}

// Call the function to fetch data asynchronously
fetchDataAsync();
7. Multiple requests.
Create an asynchronous function that retrieves data from two different API endpoints: "https://
jsonplaceholder.typicode.com/todos/1" and "https://jsonplaceholder.typicode.com/posts/1". The first API returns
a to-do task, while the second API provides post details. The function should combine the results from both APIs
and log them as an object, where the keys are "todo" and "post", and the corresponding values are the
responses from the respective APIs.
Ans-async function fetchDataFromMultipleAPIs() {
    try {
        // Make asynchronous requests to both API endpoints
        const [todoResponse, postResponse] = await Promise.all([
            fetch('https://jsonplaceholder.typicode.com/todos/1'),
            fetch('https://jsonplaceholder.typicode.com/posts/1')
        ]);

        // Check if the requests were successful (status code 200)
        if (!todoResponse.ok || !postResponse.ok) {
            throw new Error(`HTTP error! Status: ${todoResponse.status} or ${postResponse.status}`);
        }

        // Parse the JSON responses
        const todoData = await todoResponse.json();
        const postData = await postResponse.json();

        // Combine the results into an object
        const combinedResult = {
            todo: todoData,
            post: postData
        };

        // Log the combined result to the console
        console.log('Combined Result:', combinedResult);
    } catch (error) {
        // Log any errors that occurred during the fetch
        console.error('Error fetching data:', error.message);
    }
}

// Call the function to fetch data from multiple APIs asynchronously
fetchDataFromMultipleAPIs();
8. Get Data from API and Display it on the browser console.
Write a JavaScript program that uses the Fetch method to retrieve data from an API, and then logs the data to
the console. For example, you could use the API at https://jsonplaceholder.typicode.com/posts to retrieve a list
of posts, and then display them to the browser console.
Ans-<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch and Display Data</title>
</head>
<body>

<!-- Include the JavaScript script -->
<script>
    // Function to fetch and log data from the API
    async function fetchDataAndDisplay() {
        try {
            // Fetch data from the API
            const response = await fetch('https://jsonplaceholder.typicode.com/posts');

            // Check if the request was successful (status code 200)
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            // Parse the JSON response
            const data = await response.json();

            // Log the data to the console
            console.log('Fetched Data:', data);
        } catch (error) {
            // Log any errors that occurred during the fetch
            console.error('Error fetching data:', error.message);
        }
    }

    // Call the function to fetch and display data
    fetchDataAndDisplay();
</script>

</body>
</html>
9.Error Handling
Write a JavaScript program that uses the Fetch method to retrieve data from an API, and then handles errors
that may occur. For example, you could use the API at https://jsonplaceholder.typicode.com/posts/123456789
to simulate an error, and then display an error message on the webpage.
Ans-<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fetch with Error Handling</title>
</head>
<body>

<!-- Display area for results or errors -->
<div id="result"></div>

<!-- Include the JavaScript script -->
<script>
    // Function to fetch and handle data from the API
    async function fetchDataAndHandleError() {
        try {
            // Fetch data from the API
            const response = await fetch('https://jsonplaceholder.typicode.com/posts/123456789');

            // Check if the request was successful (status code 200)
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            // Parse the JSON response
            const data = await response.json();

            // Display the data on the webpage (replace this with your logic)
            displayResult(data);
        } catch (error) {
            // Handle errors and display error message on the webpage
            displayError(error.message);
        }
    }

    // Function to display the result on the webpage
    function displayResult(result) {
        document.getElementById('result').innerHTML = `<p>Fetched Data: ${JSON.stringify(result)}</p>`;
    }

    // Function to display an error message on the webpage
    function displayError(errorMessage) {
        document.getElementById('result').innerHTML = `<p>Error: ${errorMessage}</p>`;
    }

    // Call the function to fetch and handle data
    fetchDataAndHandleError();
</script>

</body>
</html>
